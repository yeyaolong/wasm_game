"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_ts"],{

/***/ "../pkg/wasm_game.js":
/*!***************************!*\
  !*** ../pkg/wasm_game.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"World\": () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"hello\": () => (/* binding */ hello),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync)\n/* harmony export */ });\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} name\n*/\nfunction hello(name) {\n    const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.hello(ptr0, len0);\n}\n\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        const obj = Object.create(World.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @returns {World}\n    */\n    static new(width) {\n        const ret = wasm.world_new(width);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.world_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_head_index() {\n        const ret = wasm.world_snake_head_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    update() {\n        wasm.world_update(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_alert_d13855488f6e43a1 = function(arg0, arg1) {\n        alert(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(bytes) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    const module = new WebAssembly.Module(bytes);\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! wasm_game_bg.wasm */ \"../pkg/wasm_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n//# sourceURL=webpack://www/../pkg/wasm_game.js?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm_game */ \"../pkg/wasm_game.js\");\n\r\n(0,wasm_game__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().then(function () {\r\n    var CELL_SIZE = 20; // 定义一个格子的大小\r\n    var world = wasm_game__WEBPACK_IMPORTED_MODULE_0__.World[\"new\"](8); // 一个16 * 16 的世界\r\n    var worldWidth = world.width();\r\n    var fps = 5;\r\n    var canvas = document.getElementById(\"snake-world\");\r\n    var context = canvas.getContext(\"2d\");\r\n    canvas.width = worldWidth * CELL_SIZE;\r\n    canvas.height = worldWidth * CELL_SIZE;\r\n    // 画一个16 * 16的网格\r\n    function drawWorld() {\r\n        context.beginPath();\r\n        // 画横线\r\n        for (var x = 0; x <= worldWidth; x++) {\r\n            context.moveTo(CELL_SIZE * x, 0);\r\n            context.lineTo(CELL_SIZE * x, CELL_SIZE * worldWidth);\r\n        }\r\n        // 画竖线\r\n        for (var y = 0; y <= worldWidth; y++) {\r\n            context.moveTo(0, CELL_SIZE * y);\r\n            context.lineTo(CELL_SIZE * worldWidth, CELL_SIZE * y);\r\n        }\r\n        context.stroke();\r\n    }\r\n    // 画蛇头\r\n    function drawSnake() {\r\n        var snake_index = world.snake_head_index();\r\n        var row = Math.floor(snake_index / worldWidth);\r\n        var col = snake_index % worldWidth;\r\n        context.beginPath();\r\n        context.fillRect(col * CELL_SIZE, // x\r\n        row * CELL_SIZE, // y\r\n        CELL_SIZE, CELL_SIZE);\r\n        context.stroke();\r\n    }\r\n    function draw() {\r\n        drawWorld();\r\n        drawSnake();\r\n    }\r\n    function run() {\r\n        // 视频里用的setTimeout里套requestAnimationFrame,\r\n        // 虽然我觉得直接window.requestAnimationFrame会更好一点\r\n        // 但实际上，requestAnimationFrame似乎有点太快了\r\n        // 所以这里只好外层套一个setTimeout用来减速\r\n        setTimeout(function () {\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            world.update();\r\n            draw();\r\n            requestAnimationFrame(run);\r\n        }, 1000 / fps);\r\n    }\r\n    draw();\r\n    run();\r\n});\r\n\n\n//# sourceURL=webpack://www/./index.ts?");

/***/ }),

/***/ "../pkg/wasm_game_bg.wasm":
/*!********************************!*\
  !*** ../pkg/wasm_game_bg.wasm ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"18c43df515539936cfdb.wasm\";\n\n//# sourceURL=webpack://www/../pkg/wasm_game_bg.wasm?");

/***/ })

}]);